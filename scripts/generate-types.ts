#!/usr/bin/env tsx
/**
 * Generate TypeScript types from OpenAPI specification
 */

import { execSync } from 'child_process';
import { readFileSync, writeFileSync } from 'fs';
import { resolve } from 'path';

const OPENAPI_PATH = resolve(__dirname, '../../openapi.json');
const OUTPUT_PATH = resolve(__dirname, '../src/types.generated.ts');

async function generateTypes() {
  try {
    console.log('üìù Generating TypeScript types from OpenAPI spec...');
    
    // Generate types using openapi-typescript
    execSync(
      `npx openapi-typescript ${OPENAPI_PATH} -o ${OUTPUT_PATH}`,
      { stdio: 'inherit' }
    );
    
    // Post-process the generated file
    let content = readFileSync(OUTPUT_PATH, 'utf-8');
    
    // Add header comment
    const header = `/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 * Generated from: ${OPENAPI_PATH}
 */

/* eslint-disable */
/* tslint:disable */

`;
    
    content = header + content;
    
    // Clean up the generated types (remove empty interfaces, etc.)
    content = content
      .replace(/export interface \w+ {[\s]*}/g, '') // Remove empty interfaces
      .replace(/\n{3,}/g, '\n\n'); // Clean up excessive newlines
    
    writeFileSync(OUTPUT_PATH, content);
    
    console.log('‚úÖ Types generated successfully!');
    console.log(`üìÅ Output: ${OUTPUT_PATH}`);
    
  } catch (error) {
    console.error('‚ùå Failed to generate types:', error);
    process.exit(1);
  }
}

generateTypes();