/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 * Generated from: /Users/gdc/specstory-cloud-sdk/openapi.json
 */

/* eslint-disable */
/* tslint:disable */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List projects
         * @description List all projects accessible to the authenticated user
         */
        get: operations["listProjects"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a project
         * @description Delete a project and all its sessions
         */
        delete: operations["deleteProject"];
        options?: never;
        head?: never;
        /**
         * Update a project
         * @description Update project properties
         */
        patch: operations["updateProject"];
        trace?: never;
    };
    "/api/v1/projects/{projectId}/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List sessions
         * @description List all sessions for a project
         */
        get: operations["listSessions"];
        /**
         * Write a session
         * @description Create or update a session
         */
        put: operations["writeSession"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/sessions/{sessionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read a session
         * @description Get session details
         */
        get: operations["readSession"];
        put?: never;
        post?: never;
        /**
         * Delete a session
         * @description Delete a specific session
         */
        delete: operations["deleteSession"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/graphql": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * GraphQL Endpoint
         * @description Advanced querying interface for complex operations
         */
        post: operations["graphqlQuery"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ErrorResponse: {
            /** @example false */
            success: boolean;
            /** @example Invalid API key */
            error: string;
        };
        Project: {
            /** Format: uuid */
            id: string;
            ownerId: string;
            name: string;
            icon?: string;
            color?: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        ListProjectsResponse: {
            success: boolean;
            data: {
                projects: components["schemas"]["Project"][];
                total: number;
            };
        };
        UpdateProjectRequest: {
            name?: string;
            icon?: string;
            color?: string;
        };
        UpdateProjectResponse: {
            success: boolean;
            data: {
                name?: string;
                icon?: string;
                color?: string;
            };
        };
        DeleteProjectResponse: {
            success: boolean;
            data: {
                deletedProject: components["schemas"]["Project"];
                /** Format: date-time */
                deletedAt: string;
            };
        };
        SessionMetadata: {
            clientName?: string | null;
            clientVersion?: string | null;
            agentName?: string | null;
            deviceId?: string | null;
            gitBranches?: string[] | null;
            llmModels?: string[] | null;
            tags?: string[] | null;
        };
        SessionSummary: {
            /** Format: uuid */
            id: string;
            projectId: string;
            name: string;
            markdownSize: number;
            rawDataSize: number;
            metadata: components["schemas"]["SessionMetadata"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            startedAt?: string | null;
            /** Format: date-time */
            endedAt?: string | null;
            etag?: string;
        };
        SessionDetail: {
            /** Format: uuid */
            id: string;
            projectId: string;
            name: string;
            markdownContent: string;
            markdownSize: number;
            rawDataSize: number;
            metadata: components["schemas"]["SessionMetadata"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            startedAt?: string | null;
            /** Format: date-time */
            endedAt?: string | null;
        };
        ListSessionsResponse: {
            success: boolean;
            data: {
                sessions: components["schemas"]["SessionSummary"][];
                total: number;
                projectId: string;
            };
        };
        WriteSessionRequest: {
            projectName: string;
            markdown: string;
            rawData: string;
            name: string;
            metadata?: components["schemas"]["SessionMetadata"];
        };
        WriteSessionResponse: {
            success: boolean;
            data: {
                sessionId: string;
                projectId: string;
                /** Format: date-time */
                createdAt: string;
            };
        };
        SessionDetailResponse: {
            success: boolean;
            data: {
                session: components["schemas"]["SessionDetail"];
            };
        };
        DeleteSessionResponse: {
            success: boolean;
        };
        GraphQLRequest: {
            query: string;
            variables?: {
                [key: string]: unknown;
            };
            operationName?: string | null;
        };
        GraphQLResponse: {
            data?: Record<string, never> | null;
            errors?: Record<string, never>[] | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listProjects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully listed projects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListProjectsResponse"];
                };
            };
            /** @description Unauthorized - missing or invalid JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ID */
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted project */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteProjectResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden - user does not have permission */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ID */
                projectId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProjectRequest"];
            };
        };
        responses: {
            /** @description Successfully updated project */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateProjectResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden - user does not have permission */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listSessions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ID */
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully listed sessions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListSessionsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    writeSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ID */
                projectId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WriteSessionRequest"];
            };
        };
        responses: {
            /** @description Successfully wrote session */
            200: {
                headers: {
                    /** @description Entity tag for the newly written session */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WriteSessionResponse"];
                };
            };
            /** @description Invalid request body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    readSession: {
        parameters: {
            query?: never;
            header?: {
                /** @description ETag value for conditional request */
                "If-None-Match"?: string;
            };
            path: {
                /** @description Project ID */
                projectId: string;
                /** @description Session ID */
                sessionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully read session */
            200: {
                headers: {
                    /** @description Entity tag for cache validation */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionDetailResponse"];
                };
            };
            /** @description Not Modified - session has not changed since If-None-Match */
            304: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Session not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Project ID */
                projectId: string;
                /** @description Session ID */
                sessionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteSessionResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Forbidden - user does not have permission */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    graphqlQuery: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GraphQLRequest"];
            };
        };
        responses: {
            /** @description GraphQL query executed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GraphQLResponse"];
                };
            };
            /** @description Invalid GraphQL query or variables */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
